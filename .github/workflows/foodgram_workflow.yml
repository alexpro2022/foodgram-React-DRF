name: Foodgram CI/CD

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]
  workflow_dispatch:

jobs:

  tests:
    name: Tests flake8 and pytest
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7, 3.8, 3.9, 3.11]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install \
            -r backend/requirements.txt \
            flake8 pep8-naming \
            flake8-broken-line \
            flake8-return \
            pytest-cov
      - name: Run Tests
        env:
          DB: postgres
          DB_HOST: 127.0.0.1
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          python -m flake8      
          cd backend/
          python manage.py makemigrations && \
          python manage.py migrate && \
          pytest --cov --cov-report=xml
      - name: Upload coverage reports to Codecov with GitHub Action
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}         

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2 
      - name: Login to Docker 
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Push backend to Docker Hub 
        uses: docker/build-push-action@v4
        with:
          context: backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}_backend:latest           
      - name: Push frontend to Docker Hub 
        uses: docker/build-push-action@v4
        with:
          context: frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}_frontend:latest           

  server_environment:
    name: Set up .env and copy infra files to server
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3    
      - name: Create project directory and .env-file
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo mkdir -p ${{ secrets.PROJECT_NAME }}
            sudo chmod 777 ${{ secrets.PROJECT_NAME }} 
            sudo cat > ${{ secrets.PROJECT_NAME }}/.env << _EOF_
              DB_ENGINE=${{ secrets.DB_ENGINE }}
              DB_NAME=${{ secrets.DB_NAME }}
              DB_HOST=${{ secrets.DB_HOST }}
              DB_PORT=${{ secrets.DB_PORT }}
              POSTGRES_USER=${{ secrets.POSTGRES_USER }}
              POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
              TEST_USERS_PASSWORD=${{ secrets.TEST_USERS_PASSWORD }}
              ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}
              ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
              ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
              SECRET_KEY=${{ secrets.SECRET_KEY }}
              DEBUG=${{ secrets.DEBUG }}
              # === two vars below are needed for docker-compose.yml
              PROJECT_NAME=${{ secrets.PROJECT_NAME }}
              DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            _EOF_
      - name: copy infra files via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          source: "infra/docker-compose.yml, infra/nginx.conf"
          target: ${{ secrets.PROJECT_NAME }}
          overwrite: true
          strip_components: 1

  deploy:
    runs-on: ubuntu-latest
    needs: server_environment
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd ${{ secrets.PROJECT_NAME }}
            sudo docker compose down
            sudo docker rmi \
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}_frontend \
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}_backend
            sudo systemctl stop nginx
            sudo docker compose up -d --quiet-pull       

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_USER_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!